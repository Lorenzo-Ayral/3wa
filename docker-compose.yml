version: '3.4'
services:
  frontend:
    container_name: frontend
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    depends_on:
      - backend
    volumes:
      - ./frontend:/app
    networks:
      - app

  backend:
    container_name: backend
    build:
      context: ./backend
      dockerfile: Dockerfile
      args:
        USER_ID: ${USER_ID}
        GROUP_ID: ${GROUP_ID}
    ports:
      - "8000:8000"
#      - "8001:8001"
    depends_on:
      - database
    volumes:
      - ./backend:/app
    env_file: ./backend/.env.local
    networks:
      app:
        aliases:
          - backend

  database:
    image: mysql:8.0
    container_name: database
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: db
#      MYSQL_USER: root
      MYSQL_PASSWORD: root
    ports:
      - "3306:3306"
    volumes:
      - mysql-data:/var/lib/mysql
    networks:
      app:
        aliases:
          - database

  adminer:
    container_name: adminer
    image: adminer
    ports:
      - "8080:8080"
    networks:
      - app

  mailhog:
    container_name: mailhog
    image: mailhog/mailhog
    logging:
      driver: 'none'
    ports:
      - "1030:1030" # smtp server
      - "8025:8025" # web ui

  sass-compiler:
    container_name: sass-compiler
    image: mpsorg/sass-compiler
    volumes:
      - ./frontend/src:/app/src/frontend
      - ./frontend/src/css:/css
    command: [ "sass", "--watch", "/app/src/frontend:/css", "--style", "compressed" ]
    working_dir: /app/src/frontend
    networks:
      - app
    depends_on:
      - frontend

networks:
  app:
    driver: bridge

volumes:
  mysql-data: { }
